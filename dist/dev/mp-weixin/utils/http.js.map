{"version":3,"file":"http.js","sources":["../../../../src/utils/http.ts"],"sourcesContent":["/**\n * 拦截 uploadFile 文件上传\n *\n * TODO：\n *      1.非http开头需拼接地址\n *      2.请求超时\n *      3.添加小程序端请求头标识\n *      4.添加token请求头标识\n */\n\nimport { useMemberStore } from \"@/stores\";\n\nexport const baseURL = \"https://pcapi-xiaotuxian-front-devtest.itheima.net\";\n\n// 添加拦截器\nconst httpInterceptor = {\n  // 拦截前触发\n  invoke(options: UniApp.RequestOptions) {\n    // 1.非 Http 开头需拼接地址\n    if (!options.url.startsWith(\"http\")) {\n      options.url = baseURL + options.url;\n    }\n\n    // 2.请求超时, 默认是六十秒\n    options.timeout = 10000;\n\n    // 3.添加小程序端请求头标识\n    options.header = {\n      ...options.header,\n      \"source-client\": \"miniapp\",\n    };\n\n    // 添加请求token\n    const memberStore = useMemberStore();\n    const token = memberStore.profile?.token;\n    if (token) {\n      options.header.Authorization = token;\n    }\n  },\n};\n\nuni.addInterceptor(\"request\", httpInterceptor);\nuni.addInterceptor(\"uploadFile\", httpInterceptor);\n\n/**\n * 请求函数\n * @param UniApp.RequestOptions\n * @returns Promise\n *  1.返回 Promise 对象\n *  2.请求成功\n *     2.1 提取核心数据 res.data\n *     2.2 添加类型 支持范型\n *  3.请求失败\n *     3.1 网络错误 - 提示用户切换网络或者稍后重试\n *     3.2 401错误 - 清理用户信息，跳转到登录页\n *     3.3 其他错误 - 根据后端错误信息清提示\n */\n\ninterface Data<T> {\n  code: string;\n  msg: string;\n  result: T;\n}\n\n// 这里用范型T去接收传过来的类型\nexport const http = <T>(options: UniApp.RequestOptions) => {\n  // 1. 返回一个Promise对象\n  return new Promise<Data<T>>((resolve, reject) => {\n    uni.request({\n      ...options,\n      // 2.准确的来应该是响应成功，服务器会有4次响应，每次都会调用唯独200是成功\n      success(res) {\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          resolve(res.data as Data<T>);\n        } else if (res.statusCode === 401) {\n          // 401错误 调用reject\n          const memberStore = useMemberStore();\n          memberStore.clearProfile();\n          uni.navigateTo({ url: \"/pages/login/login\" });\n          reject(res);\n        } else {\n          // 通用错误 调用reject\n          uni.showToast({\n            icon: \"none\",\n            title: (res.data as Data<T>).msg || \"请求错误\",\n          });\n          reject(res);\n        }\n      },\n      fail(err) {\n        // 网络错误，调用reject\n        uni.showToast({\n          icon: \"none\",\n          title: \"网络错误，换个网络试试\",\n        });\n        reject(err);\n      },\n    });\n  });\n};\n"],"names":["useMemberStore","uni"],"mappings":";;;;AAYO,MAAM,UAAU;AAGvB,MAAM,kBAAkB;AAAA;AAAA,EAEtB,OAAO,SAAgC;;AAErC,QAAI,CAAC,QAAQ,IAAI,WAAW,MAAM,GAAG;AAC3B,cAAA,MAAM,UAAU,QAAQ;AAAA,IAClC;AAGA,YAAQ,UAAU;AAGlB,YAAQ,SAAS;AAAA,MACf,GAAG,QAAQ;AAAA,MACX,iBAAiB;AAAA,IAAA;AAInB,UAAM,cAAcA,sBAAAA;AACd,UAAA,SAAQ,iBAAY,YAAZ,mBAAqB;AACnC,QAAI,OAAO;AACT,cAAQ,OAAO,gBAAgB;AAAA,IACjC;AAAA,EACF;AACF;AAEAC,cAAAA,MAAI,eAAe,WAAW,eAAe;AAC7CA,cAAAA,MAAI,eAAe,cAAc,eAAe;AAuBnC,MAAA,OAAO,CAAI,YAAmC;AAEzD,SAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/CA,kBAAAA,MAAI,QAAQ;AAAA,MACV,GAAG;AAAA;AAAA,MAEH,QAAQ,KAAK;AACX,YAAI,IAAI,cAAc,OAAO,IAAI,aAAa,KAAK;AACjD,kBAAQ,IAAI,IAAe;AAAA,QAAA,WAClB,IAAI,eAAe,KAAK;AAEjC,gBAAM,cAAcD,sBAAAA;AACpB,sBAAY,aAAa;AACzBC,wBAAAA,MAAI,WAAW,EAAE,KAAK,qBAAsB,CAAA;AAC5C,iBAAO,GAAG;AAAA,QAAA,OACL;AAELA,wBAAAA,MAAI,UAAU;AAAA,YACZ,MAAM;AAAA,YACN,OAAQ,IAAI,KAAiB,OAAO;AAAA,UAAA,CACrC;AACD,iBAAO,GAAG;AAAA,QACZ;AAAA,MACF;AAAA,MACA,KAAK,KAAK;AAERA,sBAAAA,MAAI,UAAU;AAAA,UACZ,MAAM;AAAA,UACN,OAAO;AAAA,QAAA,CACR;AACD,eAAO,GAAG;AAAA,MACZ;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;;"}